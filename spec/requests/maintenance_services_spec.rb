require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/maintenance_services", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # MaintenanceService. As you add validations to MaintenanceService, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # Use FactoryBot to build a valid maintenance_service payload.
    vehicle = FactoryBot.create(:vehicle)
    {
      vehicle_id: vehicle.id,
      description: "Oil change",
      status: "pending",
      date: Date.today.to_s,
      cost_cents: 2500,
      priority: "low"
    }
  }

  let(:invalid_attributes) {
    {
      # missing required fields (e.g. no vehicle_id, empty description)
      vehicle_id: nil,
      description: "",
      date: "",
      cost_cents: nil
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
  maintenance = MaintenanceService.create! valid_attributes
  # controller/view expect a nested vehicle context, request the nested index
  get vehicle_maintenance_services_url(maintenance.vehicle)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
  maintenance_service = FactoryBot.create(:maintenance_service)
      get vehicle_maintenance_service_url(maintenance_service.vehicle, maintenance_service)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
  vehicle = FactoryBot.create(:vehicle)
  get new_vehicle_maintenance_service_url(vehicle)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
  maintenance_service = FactoryBot.create(:maintenance_service)
  get edit_vehicle_maintenance_service_url(maintenance_service.vehicle, maintenance_service)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new MaintenanceService" do
        vehicle = FactoryBot.create(:vehicle)
        expect {
          post vehicle_maintenance_services_url(vehicle), params: { maintenance_service: { description: "Oil change", status: "pending", date: Date.today.to_s, cost_cents: 2500, priority: "low" } }
        }.to change(MaintenanceService, :count).by(1)
      end

      it "redirects to the created maintenance_service" do
  vehicle = FactoryBot.create(:vehicle)
  post vehicle_maintenance_services_url(vehicle), params: { maintenance_service: { description: "Oil change", status: "pending", date: Date.today.to_s, cost_cents: 2500, priority: "low" } }
  expect(response).to redirect_to(vehicle_maintenance_service_url(MaintenanceService.last.vehicle, MaintenanceService.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new MaintenanceService" do
        expect {
          vehicle = FactoryBot.create(:vehicle)
          post vehicle_maintenance_services_url(vehicle), params: { maintenance_service: invalid_attributes }
        }.to change(MaintenanceService, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        vehicle = FactoryBot.create(:vehicle)
        post vehicle_maintenance_services_url(vehicle), params: { maintenance_service: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested maintenance_service" do
  maintenance_service = FactoryBot.create(:maintenance_service)
  patch vehicle_maintenance_service_url(maintenance_service.vehicle, maintenance_service), params: { maintenance_service: new_attributes }
        maintenance_service.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the maintenance_service" do
  maintenance_service = FactoryBot.create(:maintenance_service)
  patch vehicle_maintenance_service_url(maintenance_service.vehicle, maintenance_service), params: { maintenance_service: new_attributes }
        maintenance_service.reload
        expect(response).to redirect_to(maintenance_service_url(maintenance_service))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
  maintenance_service = FactoryBot.create(:maintenance_service)
  patch vehicle_maintenance_service_url(maintenance_service.vehicle, maintenance_service), params: { maintenance_service: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested maintenance_service" do
      maintenance_service = FactoryBot.create(:maintenance_service)
      expect {
        delete vehicle_maintenance_service_url(maintenance_service.vehicle, maintenance_service)
      }.to change(MaintenanceService, :count).by(-1)
    end

    it "redirects to the maintenance_services list" do
  maintenance_service = FactoryBot.create(:maintenance_service)
  delete vehicle_maintenance_service_url(maintenance_service.vehicle, maintenance_service)
  expect(response).to redirect_to(vehicle_maintenance_services_url(maintenance_service.vehicle))
    end
  end
end
